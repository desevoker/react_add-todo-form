{"version":3,"sources":["api/todos.ts","api/users.ts","services/apiService.ts","components/NewTodo/NewTodo.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","title","completed","userId","name","username","email","findUserById","usersFromServer","find","user","NewTodo","onAdd","useState","setTitle","setUserId","hasTitleError","setHasTitleError","hasUserSelectError","setHasUserSelectError","users","onSubmit","event","preventDefault","newTitle","trim","action","method","className","type","value","onChange","newValue","target","replaceAll","placeholder","disabled","map","UserInfo","href","TodoInfo","todo","classNames","TodoList","todos","preparedTodos","todosFromServer","App","setTodos","newTodo","newId","Math","max","newTodoWithUser","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97a2a772.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { Todo, User } from '../types';\n\nimport todosFromServer from '../api/todos';\nimport usersFromServer from '../api/users';\n\nexport function findUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport function getPreparedTodos(): Todo[] {\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: findUserById(todo.userId),\n  }));\n}\n\nexport function getUsers(): User[] {\n  return usersFromServer;\n}\n","import React, { useState } from 'react';\nimport { Todo } from '../../types';\nimport { getUsers } from '../../services/apiService';\nimport './NewTodo.scss';\n\ntype Props = {\n  onAdd: (newTodo: Omit<Todo, 'id'>) => void,\n};\n\nexport const NewTodo: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserSelectError, setHasUserSelectError] = useState(false);\n\n  const users = getUsers();\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleTitleChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const forbidden = /[^a-zA-Zа-яА-ЯіІїЇєЄґҐ\\d ]/g;\n    const newValue = event.target.value.replaceAll(forbidden, '');\n\n    setTitle(newValue);\n\n    if (hasTitleError) {\n      setHasTitleError(false);\n    }\n  };\n\n  const handleUserSelectChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setUserId(+event.target.value);\n\n    if (hasUserSelectError) {\n      setHasUserSelectError(false);\n    }\n  };\n\n  const handleFormSubmit = (\n    event: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event.preventDefault();\n\n    const newTitle = title.trim();\n\n    if (!newTitle || !userId) {\n      setHasTitleError(!newTitle);\n      setHasUserSelectError(!userId);\n\n      return;\n    }\n\n    const newTodo: Omit<Todo, 'id'> = {\n      title: newTitle,\n      completed: false,\n      userId,\n    };\n\n    onAdd(newTodo);\n    reset();\n  };\n\n  return (\n    <form\n      onSubmit={handleFormSubmit}\n      action=\"/api/todos\"\n      method=\"POST\"\n    >\n      <div className=\"field\">\n        <label>\n          {'Title: '}\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={handleTitleChange}\n            placeholder=\"Enter a title\"\n          />\n        </label>\n\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label>\n          {'User: '}\n\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserSelectChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {users.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n\n        {hasUserSelectError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { User } from '../../types';\nimport './UserInfo.scss';\n\ntype Props = {\n  user?: User | null,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types';\nimport { UserInfo } from '../UserInfo';\nimport './TodoInfo.scss';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo user={todo.user} />\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport { Todo } from './types';\nimport { findUserById, getPreparedTodos } from './services/apiService';\nimport { NewTodo } from './components/NewTodo';\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\n\nconst preparedTodos = getPreparedTodos();\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(preparedTodos);\n\n  const addTodo = (newTodo: Omit<Todo, 'id'>) => {\n    const newId = Math.max(...todos.map(todo => todo.id)) + 1;\n    const user = findUserById(newTodo.userId);\n\n    const newTodoWithUser: Todo = {\n      ...newTodo,\n      id: newId,\n      user,\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodoWithUser]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <NewTodo onAdd={addTodo} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}